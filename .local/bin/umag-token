#!/usr/bin/python3

import argparse
from base64 import standard_b64encode
from json.decoder import JSONDecodeError
from typing import Optional
from requests import request
from requests.exceptions import ConnectionError
from sys import stderr


UMAG_BASIC_HEADERS = {
    'api-ver': '1.4',
    'client-ver': '1c_integrator_0.0.1',
}

BASE_URL = 'http://localhost:8080/rest/'
CABINET_LOGIN_URL = f'{BASE_URL}cabinet/org/login/signin'
ADMIN_LOGIN_URL = f'{BASE_URL}admin/org/login/signin'

CABINET_AUTH_DATA = ('+77761522222', '11111', CABINET_LOGIN_URL)
ADMIN_AUTH_DATA = ('+77786649388', '11111', ADMIN_LOGIN_URL)


def write_stderr(line: str):
    stderr.write(f'Oops, {line}\n')
    stderr.flush()


def create_argparse():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-a',
        '--admin',
        action='store_true',
        help='Login to the Admin Panel'
    )
    return parser.parse_args()


def auth(login: str, password: str, url: str) -> Optional[str]:
    encoded_credentials = standard_b64encode(f'{login}:{password}'.encode('utf-8'))
    headers = {
        **UMAG_BASIC_HEADERS,
        'Authorization': f'Basic {str(encoded_credentials, "utf-8")}',
    }

    try:
        response = request('GET', url, headers=headers)
        if response.ok:
            try:
                return response.json()['sessionToken']
            except JSONDecodeError:
                write_stderr('invalid json response')
        else:
            write_stderr(f'there is {str(response.status_code)}')
    except ConnectionError:
        write_stderr('server unavailable')

    return None


if __name__ == '__main__':
    args = create_argparse()
    if token := auth(*(ADMIN_AUTH_DATA if args.admin else CABINET_AUTH_DATA)):
        print(token)
